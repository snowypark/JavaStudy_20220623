package j10_클래스;

public class Text {

	public static void main(String[] args) {
		/*
	//// 객체지향 언어 특징
	// 1. 상속
	 * 상위 클래스의 모든 것을 상속받아 사용하는 것. 부모와 자식 관계.
	 * 부모 클래스의 변수, 메소드 등을 사용.
	 *
	 * 2. 캡슐화
	 * 데이터와 기능을 외부로부터 접근을 차단하고, 권한 또는 절차 없이 데이터를 변경, 기능 수행을
	 * 할 수 없게 캡슐처럼 보호함(데이터의 은닉성)
	 * private 기능
	 * 
	 * 3. 추상화
	 * 추상적인 요소들을 묶어서 분류하는 것
	 * 데이터의 구조화. 추상적인 요소(학생, 선생, 학부모 등의 사람)
	 * 
	 * 4. 다형성
	 * 객체의 기능이 다양한 형태를 가질 수 있음
	 * 상속과 깊은 관계
	 * 객체 또한 부모 클래스로부터 상속받은 데이터와 기능을
	 * 자식 클래스에서 재정의하여 사용 가능
	 * 
	 * 객체지향 언어의 장점
	 * 1. 재사용성 : 상속을 통해 코드의 재사용을 높일 수 있음
	 * 2. 생산성 향상 : 클래스 단위의 부품들을 조립
	 * 3. 유지보수의 우수성 : 구조화 된 소스코드 클래스단위로 소스코드를 관리 가능
	 * 
	 * 객체지향 언어의 단점
	 * 1. 객체를 세분화하여 설계해야 한다.
	 * 2. 실행 속도가 절차지향 언어 대비 느리다. ex) C언어
	 * 3. 상속으로 인해 관계가 많이 형성되면 코딩의 난이도가 높아진다.
	 * 
	 * 절차 지향 언어의 반대가 객체 지향 언어가 아님.
	 * 
	*/
		
		
		/*
		 * 클래스 = 틀
		 * 
		 * object 객체 = 클래스를 통해 구현할 수 있는 모든 대상
		 * 해당 클래스로 구현한 인스턴스를 대표하는 의미
		 * 
		 * 인스턴스 instance = 객체가 실제로 구현된 것. 클래스의 인스턴스.
		 */

	}

}
